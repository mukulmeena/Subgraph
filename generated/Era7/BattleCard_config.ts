// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BuyV2 extends ethereum.Event {
  get params(): BuyV2__Params {
    return new BuyV2__Params(this);
  }
}

export class BuyV2__Params {
  _event: BuyV2;

  constructor(event: BuyV2) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get buyType(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StopSell extends ethereum.Event {
  get params(): StopSell__Params {
    return new StopSell__Params(this);
  }
}

export class StopSell__Params {
  _event: StopSell;

  constructor(event: StopSell) {
    this._event = event;
  }

  get nftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UploadNft extends ethereum.Event {
  get params(): UploadNft__Params {
    return new UploadNft__Params(this);
  }
}

export class UploadNft__Params {
  _event: UploadNft;

  constructor(event: UploadNft) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UploadNftV2 extends ethereum.Event {
  get params(): UploadNftV2__Params {
    return new UploadNftV2__Params(this);
  }
}

export class UploadNftV2__Params {
  _event: UploadNftV2;

  constructor(event: UploadNftV2) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get busd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get era(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BattleCard_config__nftMapResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getOwner(): Address {
    return this.value2;
  }

  getUpTime(): BigInt {
    return this.value3;
  }
}

export class BattleCard_config__nftMapV2Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getBusd(): BigInt {
    return this.value1;
  }

  getEra(): BigInt {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getUpTime(): BigInt {
    return this.value4;
  }
}

export class BattleCard_config extends ethereum.SmartContract {
  static bind(address: Address): BattleCard_config {
    return new BattleCard_config("BattleCard_config", address);
  }

  coin(): Address {
    let result = super.call("coin", "coin():(address)", []);

    return result[0].toAddress();
  }

  try_coin(): ethereum.CallResult<Address> {
    let result = super.tryCall("coin", "coin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erafloorPrice(): BigInt {
    let result = super.call("erafloorPrice", "erafloorPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_erafloorPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erafloorPrice",
      "erafloorPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  floorPrice(): BigInt {
    let result = super.call("floorPrice", "floorPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_floorPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("floorPrice", "floorPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  freeRate(): BigInt {
    let result = super.call("freeRate", "freeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_freeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("freeRate", "freeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  helpers(param0: BigInt): Address {
    let result = super.call("helpers", "helpers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_helpers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("helpers", "helpers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nft(): Address {
    let result = super.call("nft", "nft():(address)", []);

    return result[0].toAddress();
  }

  try_nft(): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftMap(param0: BigInt): BattleCard_config__nftMapResult {
    let result = super.call(
      "nftMap",
      "nftMap(uint256):(uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BattleCard_config__nftMapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_nftMap(
    param0: BigInt
  ): ethereum.CallResult<BattleCard_config__nftMapResult> {
    let result = super.tryCall(
      "nftMap",
      "nftMap(uint256):(uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleCard_config__nftMapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  nftMapV2(param0: BigInt): BattleCard_config__nftMapV2Result {
    let result = super.call(
      "nftMapV2",
      "nftMapV2(uint256):(uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BattleCard_config__nftMapV2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_nftMapV2(
    param0: BigInt
  ): ethereum.CallResult<BattleCard_config__nftMapV2Result> {
    let result = super.tryCall(
      "nftMapV2",
      "nftMapV2(uint256):(uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleCard_config__nftMapV2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pause(): boolean {
    let result = super.call("pause", "pause():(bool)", []);

    return result[0].toBoolean();
  }

  try_pause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pause", "pause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sellingNftIndexs(param0: BigInt): BigInt {
    let result = super.call(
      "sellingNftIndexs",
      "sellingNftIndexs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_sellingNftIndexs(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellingNftIndexs",
      "sellingNftIndexs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellingNfts(param0: BigInt): BigInt {
    let result = super.call("sellingNfts", "sellingNfts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sellingNfts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellingNfts",
      "sellingNfts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(taxWallet: Address): boolean {
    let result = super.call("withdraw", "withdraw(address):(bool)", [
      ethereum.Value.fromAddress(taxWallet)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(taxWallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(address):(bool)", [
      ethereum.Value.fromAddress(taxWallet)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddHelperCall extends ethereum.Call {
  get inputs(): AddHelperCall__Inputs {
    return new AddHelperCall__Inputs(this);
  }

  get outputs(): AddHelperCall__Outputs {
    return new AddHelperCall__Outputs(this);
  }
}

export class AddHelperCall__Inputs {
  _call: AddHelperCall;

  constructor(call: AddHelperCall) {
    this._call = call;
  }

  get helper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddHelperCall__Outputs {
  _call: AddHelperCall;

  constructor(call: AddHelperCall) {
    this._call = call;
  }
}

export class PauseContractCall extends ethereum.Call {
  get inputs(): PauseContractCall__Inputs {
    return new PauseContractCall__Inputs(this);
  }

  get outputs(): PauseContractCall__Outputs {
    return new PauseContractCall__Outputs(this);
  }
}

export class PauseContractCall__Inputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class PauseContractCall__Outputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class RemoveHelperCall extends ethereum.Call {
  get inputs(): RemoveHelperCall__Inputs {
    return new RemoveHelperCall__Inputs(this);
  }

  get outputs(): RemoveHelperCall__Outputs {
    return new RemoveHelperCall__Outputs(this);
  }
}

export class RemoveHelperCall__Inputs {
  _call: RemoveHelperCall;

  constructor(call: RemoveHelperCall) {
    this._call = call;
  }

  get helper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveHelperCall__Outputs {
  _call: RemoveHelperCall;

  constructor(call: RemoveHelperCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResumeCall extends ethereum.Call {
  get inputs(): ResumeCall__Inputs {
    return new ResumeCall__Inputs(this);
  }

  get outputs(): ResumeCall__Outputs {
    return new ResumeCall__Outputs(this);
  }
}

export class ResumeCall__Inputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class ResumeCall__Outputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitAddressCall extends ethereum.Call {
  get inputs(): InitAddressCall__Inputs {
    return new InitAddressCall__Inputs(this);
  }

  get outputs(): InitAddressCall__Outputs {
    return new InitAddressCall__Outputs(this);
  }
}

export class InitAddressCall__Inputs {
  _call: InitAddressCall;

  constructor(call: InitAddressCall) {
    this._call = call;
  }

  get coin_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get era(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nft_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitAddressCall__Outputs {
  _call: InitAddressCall;

  constructor(call: InitAddressCall) {
    this._call = call;
  }
}

export class SetFreeRateCall extends ethereum.Call {
  get inputs(): SetFreeRateCall__Inputs {
    return new SetFreeRateCall__Inputs(this);
  }

  get outputs(): SetFreeRateCall__Outputs {
    return new SetFreeRateCall__Outputs(this);
  }
}

export class SetFreeRateCall__Inputs {
  _call: SetFreeRateCall;

  constructor(call: SetFreeRateCall) {
    this._call = call;
  }

  get _busdFreeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _eraFreeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFreeRateCall__Outputs {
  _call: SetFreeRateCall;

  constructor(call: SetFreeRateCall) {
    this._call = call;
  }
}

export class SetFloorPriceCall extends ethereum.Call {
  get inputs(): SetFloorPriceCall__Inputs {
    return new SetFloorPriceCall__Inputs(this);
  }

  get outputs(): SetFloorPriceCall__Outputs {
    return new SetFloorPriceCall__Outputs(this);
  }
}

export class SetFloorPriceCall__Inputs {
  _call: SetFloorPriceCall;

  constructor(call: SetFloorPriceCall) {
    this._call = call;
  }

  get busd(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get era(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFloorPriceCall__Outputs {
  _call: SetFloorPriceCall;

  constructor(call: SetFloorPriceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get taxWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UploadNftV2Call extends ethereum.Call {
  get inputs(): UploadNftV2Call__Inputs {
    return new UploadNftV2Call__Inputs(this);
  }

  get outputs(): UploadNftV2Call__Outputs {
    return new UploadNftV2Call__Outputs(this);
  }
}

export class UploadNftV2Call__Inputs {
  _call: UploadNftV2Call;

  constructor(call: UploadNftV2Call) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get busd(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get era(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UploadNftV2Call__Outputs {
  _call: UploadNftV2Call;

  constructor(call: UploadNftV2Call) {
    this._call = call;
  }
}

export class StopSellV2Call extends ethereum.Call {
  get inputs(): StopSellV2Call__Inputs {
    return new StopSellV2Call__Inputs(this);
  }

  get outputs(): StopSellV2Call__Outputs {
    return new StopSellV2Call__Outputs(this);
  }
}

export class StopSellV2Call__Inputs {
  _call: StopSellV2Call;

  constructor(call: StopSellV2Call) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopSellV2Call__Outputs {
  _call: StopSellV2Call;

  constructor(call: StopSellV2Call) {
    this._call = call;
  }
}

export class BuyV3Call extends ethereum.Call {
  get inputs(): BuyV3Call__Inputs {
    return new BuyV3Call__Inputs(this);
  }

  get outputs(): BuyV3Call__Outputs {
    return new BuyV3Call__Outputs(this);
  }
}

export class BuyV3Call__Inputs {
  _call: BuyV3Call;

  constructor(call: BuyV3Call) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyV3Call__Outputs {
  _call: BuyV3Call;

  constructor(call: BuyV3Call) {
    this._call = call;
  }
}

export class BuyV2Call extends ethereum.Call {
  get inputs(): BuyV2Call__Inputs {
    return new BuyV2Call__Inputs(this);
  }

  get outputs(): BuyV2Call__Outputs {
    return new BuyV2Call__Outputs(this);
  }
}

export class BuyV2Call__Inputs {
  _call: BuyV2Call;

  constructor(call: BuyV2Call) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyV2Call__Outputs {
  _call: BuyV2Call;

  constructor(call: BuyV2Call) {
    this._call = call;
  }
}
