// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Game must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Game", id.toString(), this);
    }
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    return value!.toString();
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    return value!.toString();
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get cumulativeUsersRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeUsersRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeUsersRevenueUSD(value: BigDecimal) {
    this.set("cumulativeUsersRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeGameSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeGameSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeGameSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeGameSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyMetrics(): Array<string> {
    let value = this.get("dailyMetrics");
    return value!.toStringArray();
  }

  set dailyMetrics(value: Array<string>) {
    this.set("dailyMetrics", Value.fromStringArray(value));
  }

  get hourlyMetrics(): Array<string> {
    let value = this.get("hourlyMetrics");
    return value!.toStringArray();
  }

  set hourlyMetrics(value: Array<string>) {
    this.set("hourlyMetrics", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Currency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }
}

export class Card extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Card entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Card must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Card", id.toString(), this);
    }
  }

  static load(id: string): Card | null {
    return changetype<Card | null>(store.get("Card", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get mintOwner(): string {
    let value = this.get("mintOwner");
    return value!.toString();
  }

  set mintOwner(value: string) {
    this.set("mintOwner", Value.fromString(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    return value!.toBigInt();
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class Marketplace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Marketplace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Marketplace must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Marketplace", id.toString(), this);
    }
  }

  static load(id: string): Marketplace | null {
    return changetype<Marketplace | null>(store.get("Marketplace", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get currencies(): Array<string> {
    let value = this.get("currencies");
    return value!.toStringArray();
  }

  set currencies(value: Array<string>) {
    this.set("currencies", Value.fromStringArray(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    return value!.toBigInt();
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value!.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listedHash(): string {
    let value = this.get("listedHash");
    return value!.toString();
  }

  set listedHash(value: string) {
    this.set("listedHash", Value.fromString(value));
  }

  get soldHash(): string {
    let value = this.get("soldHash");
    return value!.toString();
  }

  set soldHash(value: string) {
    this.set("soldHash", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get soldPrice(): BigInt {
    let value = this.get("soldPrice");
    return value!.toBigInt();
  }

  set soldPrice(value: BigInt) {
    this.set("soldPrice", Value.fromBigInt(value));
  }

  get soldpriceUSD(): BigDecimal {
    let value = this.get("soldpriceUSD");
    return value!.toBigDecimal();
  }

  set soldpriceUSD(value: BigDecimal) {
    this.set("soldpriceUSD", Value.fromBigDecimal(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }
}

export class MetricsHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MetricsHourlySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetricsHourlySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetricsHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): MetricsHourlySnapshot | null {
    return changetype<MetricsHourlySnapshot | null>(
      store.get("MetricsHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get hourlyActiveUsers(): i32 {
    let value = this.get("hourlyActiveUsers");
    return value!.toI32();
  }

  set hourlyActiveUsers(value: i32) {
    this.set("hourlyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get hourlyNewUsersCount(): i32 {
    let value = this.get("hourlyNewUsersCount");
    return value!.toI32();
  }

  set hourlyNewUsersCount(value: i32) {
    this.set("hourlyNewUsersCount", Value.fromI32(value));
  }

  get hourlyTransactionCount(): i32 {
    let value = this.get("hourlyTransactionCount");
    return value!.toI32();
  }

  set hourlyTransactionCount(value: i32) {
    this.set("hourlyTransactionCount", Value.fromI32(value));
  }

  get hourlyNFTSoldCount(): i32 {
    let value = this.get("hourlyNFTSoldCount");
    return value!.toI32();
  }

  set hourlyNFTSoldCount(value: i32) {
    this.set("hourlyNFTSoldCount", Value.fromI32(value));
  }

  get hourlyNFTListingCount(): i32 {
    let value = this.get("hourlyNFTListingCount");
    return value!.toI32();
  }

  set hourlyNFTListingCount(value: i32) {
    this.set("hourlyNFTListingCount", Value.fromI32(value));
  }

  get hourlyNFTUnListingCount(): i32 {
    let value = this.get("hourlyNFTUnListingCount");
    return value!.toI32();
  }

  set hourlyNFTUnListingCount(value: i32) {
    this.set("hourlyNFTUnListingCount", Value.fromI32(value));
  }

  get hourlyNFTMintingCount(): i32 {
    let value = this.get("hourlyNFTMintingCount");
    return value!.toI32();
  }

  set hourlyNFTMintingCount(value: i32) {
    this.set("hourlyNFTMintingCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MetricsDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetricsDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetricsDailySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetricsDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): MetricsDailySnapshot | null {
    return changetype<MetricsDailySnapshot | null>(
      store.get("MetricsDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    return value!.toI32();
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyNewUsersCount(): i32 {
    let value = this.get("dailyNewUsersCount");
    return value!.toI32();
  }

  set dailyNewUsersCount(value: i32) {
    this.set("dailyNewUsersCount", Value.fromI32(value));
  }

  get dailyTransactionCount(): i32 {
    let value = this.get("dailyTransactionCount");
    return value!.toI32();
  }

  set dailyTransactionCount(value: i32) {
    this.set("dailyTransactionCount", Value.fromI32(value));
  }

  get dailyNFTSoldCount(): i32 {
    let value = this.get("dailyNFTSoldCount");
    return value!.toI32();
  }

  set dailyNFTSoldCount(value: i32) {
    this.set("dailyNFTSoldCount", Value.fromI32(value));
  }

  get dailyNFTListingCount(): i32 {
    let value = this.get("dailyNFTListingCount");
    return value!.toI32();
  }

  set dailyNFTListingCount(value: i32) {
    this.set("dailyNFTListingCount", Value.fromI32(value));
  }

  get dailyNFTUnListingCount(): i32 {
    let value = this.get("dailyNFTUnListingCount");
    return value!.toI32();
  }

  set dailyNFTUnListingCount(value: i32) {
    this.set("dailyNFTUnListingCount", Value.fromI32(value));
  }

  get dailyNFTMintingCount(): i32 {
    let value = this.get("dailyNFTMintingCount");
    return value!.toI32();
  }

  set dailyNFTMintingCount(value: i32) {
    this.set("dailyNFTMintingCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investmentUSD(): BigDecimal {
    let value = this.get("investmentUSD");
    return value!.toBigDecimal();
  }

  set investmentUSD(value: BigDecimal) {
    this.set("investmentUSD", Value.fromBigDecimal(value));
  }

  get realizedProfitUSD(): BigDecimal {
    let value = this.get("realizedProfitUSD");
    return value!.toBigDecimal();
  }

  set realizedProfitUSD(value: BigDecimal) {
    this.set("realizedProfitUSD", Value.fromBigDecimal(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get nftsCount(): i32 {
    let value = this.get("nftsCount");
    return value!.toI32();
  }

  set nftsCount(value: i32) {
    this.set("nftsCount", Value.fromI32(value));
  }

  get nftsMinted(): Array<string> {
    let value = this.get("nftsMinted");
    return value!.toStringArray();
  }

  set nftsMinted(value: Array<string>) {
    this.set("nftsMinted", Value.fromStringArray(value));
  }

  get nftsMintedCount(): i32 {
    let value = this.get("nftsMintedCount");
    return value!.toI32();
  }

  set nftsMintedCount(value: i32) {
    this.set("nftsMintedCount", Value.fromI32(value));
  }

  get sellOrders(): Array<string> {
    let value = this.get("sellOrders");
    return value!.toStringArray();
  }

  set sellOrders(value: Array<string>) {
    this.set("sellOrders", Value.fromStringArray(value));
  }

  get buyOrders(): Array<string> {
    let value = this.get("buyOrders");
    return value!.toStringArray();
  }

  set buyOrders(value: Array<string>) {
    this.set("buyOrders", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ActiveUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveUser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveUser", id.toString(), this);
    }
  }

  static load(id: string): ActiveUser | null {
    return changetype<ActiveUser | null>(store.get("ActiveUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
